<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 02 - MVC Framework Introduction
-->
<lesson status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Frameworks</a>
            </li>
            <li>
                <a href="#{tag2}">Models</a>
            </li>
            <li>
                <a href="#{tag3}">Controllers</a>
            </li>
            <li>
                <a href="#{tag4}">Views</a>
            </li>
            <li>
                <a href="#{tag5}">Support Components</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="Setup" layout="normal">
        <h1>Setup</h1>
        <p>This lesson mentions source code files from
            the <a href="https://github.com/comp4711/example-contacts" target="_blank">
                Example Contacts
            </a> demo webapp. Please download that project first, and extract
            it locally, so that you can refer to the source files during the lesson.
        </p>
    </slide>

    <slide title="Frameworks" layout="normal" tag="tag1">
        <h1>Frameworks</h1>
        <p>An MVC framework is one with conventions
            and pre-built components that encourage or enforce
            good programming practices.</p>
        <p>CodeIgniter is one such framework.</p>
        <p>Others include CakePHP, Fat-Free, FuelPHP, Kohana, Laravel, Symfony2, Yii and Zend</p>
    </slide>

    <slide title="Design Pattern Driven!" layout="normal">
        <div class="left">
            <p>Model-View-Controller is a design pattern.</p>
            <p>It is an "industry-accepted best practice",
                that says that it is good to keep separate concerns
                apart from each other.</p>
            <p>CodeIgniter has base classes for models and controllers,
                and it has components to build presentation content
                separate from these. This is not conventional PHP scripting!</p>
        </div>
        <div class="right">
            <p>A typical MVC framework incorporates many other 
                <a href="http://en.wikipedia.org/wiki/Software_design_pattern" target="_blank">
                    design patterns</a>:</p>
            <ul>
                <li>DAO (DB access)</li>
                <li>Business delegate (framework itself)</li>
                <li>Session facade (session library)</li>
                <li>Front controller (index.php)</li>
                <li>Intercepting filter (hooks)</li>
                <li>Active record (model)</li>
            </ul>

        </div>
    </slide>

    <slide title="Categorizing MVC Frameworks" layout="normal">
        <p>Frameworks come in all sizes.</p>
        <p>They differ in philosophy, scope, management tools
        &amp; included plugins.</p>
        <table style="width:90%; font-size:80%;text-align:left">
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Adds</th>
                    <th>Size</th>
                    <th>Example</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="width:20%">Micro</td>
                    <td style="width:40%">MVC, plugins, routing, instance</td>
                    <td style="width:20%">0.3MB</td>
                    <td style="width:20%">Fat-Free</td>
                </tr>
                <tr>
                    <td>Lean</td>
                    <td>Config, templates</td>
                    <td>2MB</td>
                    <td>CodeIgniter</td>
                </tr>
                <tr>
                    <td>Normal</td>
                    <td>Scaffolding, auth, ORM, CLI, IDE plugin</td>
                    <td>10MB</td>
                    <td>CakePHP</td>
                </tr>
                <tr>
                    <td>Enterprise</td>
                    <td>Engines (templating, ORM), included plugins, installer, starter, generators</td>
                    <td>24MB+</td>
                    <td>Symfony2</td>
                </tr>
            </tbody>
        </table>
    </slide>

	<slide title="CodeIgniter Architecture" layout="normal">
		<div class="left">
			<p>CodeIgniter routing involves request lifecycle "hooks", 
				with security rules, before identifying the right controller.</p>
			<p> The controller then uses other components, like helpers, 
				models, libraries, etc, to build what is passed to a view.</p>
			<p>Many such components are built into CI, and the webapp
				developer would normally build their own by using or extending these.</p>
		</div>
		<div class="right">
			<img class="scale" width="697" height="205" src="/pix/lessons/1-6.png"/>
		</div>
	</slide>

	<slide title="CodeIgniter Examples" layout="normal">
		<div class="left">
			<p>The <a href="http://www.codeigniter.com/">CodeIgniter website</a> itself is (not surprisingly) implemented using CodeIgniter,
				and it is <a href="https://github.com/bcit-ci/codeigniter-website">open-sourced</a>:)</p>
			<p>Many major corporations have used CodeIgniter, whether internally or public-facing: 
				Uber, Apple, Telus</p>
			<p>Some other sites built with CodeIgniter, in no specific order:
				https://www.daniweb.com/,
				http://www.fsw.edu/, 
				http://creditflux.com/,
				http://www.la-commanderie.be/
			</p>
            
		</div>
		<div class="right">
			<img class="scale" width="600" height="458" src="/pix/lessons/1-8.png"/>
		</div>
	</slide>

 
</lesson>

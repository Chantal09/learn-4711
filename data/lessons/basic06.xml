<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 06 - Routing
-->
<lesson status="v2.0">

	<!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Routing Rules</a>
            </li>
            <li>
                <a href="#{tag2}">Default Controllers</a>
            </li>
            <li>
                <a href="#{tag3}">Callback Routing</a>
            </li>
            <li>
                <a href="#{tag4}">HTTP Verb Routing</a>
            </li>
            <li>
                <a href="#{tag5}">Error Routing</a>
            </li>
        </ol>
    </slide>


    <slide title="Routing" layout="normal">
        <p>Segment-based routing is the normal CodeIgniter way of resolving
            the handling of an incoming request.</p>
        <p>There are alternatives: wildcard routing, regular expression routing, callback
            routing, and HTTP verb routing.</p>
        <p>For the truly adventurous you can even remap requests on the fly.</p>
        <p>We'll look at each of these in turn.</p>
		<p>Not routing: utility, service, misdirection</p>
    </slide>

    <slide title="Routing Rules" layout="normal"  tag="tag1">
        <p>The controller folder convention can be over-ridden by 
            specifying 
            <a href="http://www.codeigniter.com/userguide3/general/routing.html"
               target="_blank">routing rules</a>, in 
            <code>application/config/routes.php</code>
        </p>
        <p>An example such rule lets you change the default controller:<br/>
            <code>$route['default_controller'] = 'welcome';</code>
        </p>
        <p>If you specify multiple rules, they are tested consecutively
            until one fits.</p>
        <p>Any reserved route rules must come before any wildcard or regular expression rules!</p>
    </slide>

    <slide title="Wildcard Routing" layout="normal">
        <div class="left">
            <p>A routing rule can use a "wildcard" token,
                <code>(:num)</code> to match a numeric segment value, or
                <code>(:any)</code> to match any segment value.
            </p>
            <p>Specify an expression using these as the "key" for a routing
                rule, and specify the proper destination as the "value".</p>
            <p>You can use the substitution token <code>$n</code>
                to reference a URI segment in the original request.</p>
        </div>
        <div class="right">
            <p>Some examples of routing rules:</p>
            <p>
                <code>$route['blog/joe'] = "blogs/users/34";</code>
            </p>
            <p>
                <code>$route['product/(:num)'] = "catalog/product_lookup_by_id/$1";</code>
            </p>
            <p>
                <code>$route['page/(:any)'] = 'welcome/page/$1';</code>
            </p>
            <p>
                <code>$route['secret/(:any)/(:any)'] = 'youllneverfindme/$1/$2';</code>
            </p>
        </div>
    </slide>

    <slide title="Regular Expression Routing" layout="normal">
        <p>You can also use a regular expression in a routing rule.</p>
        <p>For instance:<br/>
            <code>$route['products/([a-z]+)/(\d+)'] = "$1/id_$2";</code>
            <br/>
            would remap <code>/products/banana/25</code> 
            to <code>/banana/id_25</code>
        </p>
        <p>Another example:<br/>
            <code>$route['([a-z]+)/register'] = 'assimilate/$0';</code>
            <br/>
            would remap <code>/jim/register</code> 
            to <code>/assimilate/jim</code>
        </p>
    </slide>

    <slide title="Default Controllers" layout="normal" tag="tag2">
        <p>If you are using PHP &gt;= 5.3 you can use callbacks in place 
            of the normal routing rules to process the back-references.</p>
        <p>For instance:<br/>
            <code>$route['products/([a-zA-Z]+)/edit/(\d+)'] = <br/>
                function ($product_type, $id)<br/>
                {<br/>
&#160;&#160;return 'catalog/product_edit/' . strtolower($product_type) . '/' . $id;<br/>
                };<br/>

            </code>
        </p>
        <p>
            This is code to execute, NOT a controller. In the above example, the two matched tokens
            would be passed as the parameters  <code>$product_type</code> and 
            <code>$id</code>.
        </p>
    </slide>

    <slide title="Callback Routing" layout="normal" tag="tag3">
        <p>If you are using PHP &gt;= 5.3 you can use callbacks in place 
            of the normal routing rules to process the back-references.</p>
        <p>For instance:<br/>
            <code>$route['products/([a-zA-Z]+)/edit/(\d+)'] = <br/>
                function ($product_type, $id)<br/>
                {<br/>
&#160;&#160;return 'catalog/product_edit/' . strtolower($product_type) . '/' . $id;<br/>
                };<br/>

            </code>
        </p>
        <p>
            This is code to execute, NOT a controller. In the above example, the two matched tokens
            would be passed as the parameters  <code>$product_type</code> and 
            <code>$id</code>.
        </p>
    </slide>

    <slide title="HTTP Verb Routing" layout="normal" tag="tag4">
        <p>You can specify routing rules that apply to specific HTTP
            request types. This would be applicable to utility and
            service controllers.</p>
        <p>Some examples, in a RESTful fashion:<br/>
            <code>$route['products']['PUT'] = 'product/insert';</code>
            <br/>
            <code>$route['products/(:num)']['DELETE'] = 'product/delete/$1';</code>
        </p>
    </slide>

    <slide title="Error Routing" layout="normal" tag="tag5">
        <p>You can specify routing rules that apply to specific HTTP
            request types. This would be applicable to utility and
            service controllers.</p>
        <p>Some examples, in a RESTful fashion:<br/>
            <code>$route['products']['PUT'] = 'product/insert';</code>
            <br/>
            <code>$route['products/(:num)']['DELETE'] = 'product/delete/$1';</code>
        </p>
    </slide>

</lesson>

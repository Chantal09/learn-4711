<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 06 - Routing
-->
<lesson status="v2.0">

	<!-- Agenda -->
	<slide title="Agenda" layout="normal">
		<ol>
			<li>
				<a href="#{tag1}">Routing Rules</a>
			</li>
			<li>
				<a href="#{tag2}">Default Controllers</a>
			</li>
			<li>
				<a href="#{tag3}">Callback Routing</a>
			</li>
			<li>
				<a href="#{tag4}">HTTP Verb Routing</a>
			</li>
			<li>
				<a href="#{tag5}">Error Routing</a>
			</li>
		</ol>
	</slide>


	<slide title="Routing" layout="normal">
		<p>Routing is the process of determining how to handle an incoming
			request. This can be done by explicit configuration, or "by
			convention".</p>
		<p>The incoming request string is first split into segments, based
			on forward slashes ("/"). If there is a routing rule
			that matches the request segments, it is applied.
			Otherwise, CodeIgniter treats  the segments as folder names within 
			<code>application/controllers</code>,
			with the first non-folder name identifying the controller
			class meant to handle the request.
			This is called <b>routing by convention</b>, and needs no
			configuration.</p>
		<p>This lesson explains basic routing configuration, and the
			followup lesson explores techniques for the 
			adventurous developer, as well as
			some guidance for utility and service controllers, and for
			misdirection</p>
	</slide>

	<slide title="1. Routing Rules" layout="normal"  tag="tag1">
		<p>The controller folder convention can be over-ridden by 
			specifying 
			<a href="http://www.codeigniter.com/userguide3/general/routing.html"
			   target="_blank">routing rules</a>, in 
			<code>application/config/routes.php</code>
		</p>
		<p>An example such rule lets you change the default controller:<br/>
			<code>$route['default_controller'] = 'welcome';</code>
		</p>
		<p>If you specify multiple rules, they are tested consecutively
			until one fits.</p>
		<p>Any explicit routing rules must come before any wildcard or regular expression rules!</p>
	</slide>

	<slide title="Wildcard Routing" layout="normal">
		<div class="left">
			<p>A routing rule can use a "wildcard" token,
				<code>(:num)</code> to match a numeric segment value, or
				<code>(:any)</code> to match any segment value.
			</p>
			<p>Specify an expression using these as the "key" for a routing
				rule, and specify the proper destination as the "value".</p>
			<p>You can use the substitution token <code>$n</code>
				to reference a "base 0" URI segment in the original request.</p>
		</div>
		<div class="right">
			<p>Some examples of routing rules:</p>
			<p>
				<code>$route['blog/joe'] = "blogs/users/34";</code>
			</p>
			<p>
				<code>$route['product/(:num)'] = "catalog/product_lookup_by_id/$1";</code>
			</p>
			<p>
				<code>$route['page/(:any)'] = 'welcome/page/$1';</code>
			</p>
			<p>
				<code>$route['secret/(:any)/(:any)'] = 'youllneverfindme/$1/$2';</code>
			</p>
		</div>
	</slide>

	<slide title="Regular Expression Routing" layout="normal">
		<p>You can also use a conventional regular expression in a routing rule.</p>
		<p>For instance:<br/>
			<code>$route['products/([a-z]+)/(\d+)'] = "$1/id_$2";</code>
			<br/>
			would remap <code>/products/banana/25</code> 
			to <code>/banana/id_25</code>
		</p>
		<p>Another example:<br/>
			<code>$route['([a-z]+)/register'] = 'assimilate/$0';</code>
			<br/>
			would remap <code>/jim/register</code> 
			to <code>/assimilate/jim</code>
		</p>
	</slide>

	<slide title="2. Default Controllers" layout="normal" tag="tag2">
		<p>One of the reserved routes, mentioned earlier, is for the
			"default controller" ...<br/>
			<code>$route['default_controller'] = 'welcome';</code>
		</p>
		<p>This applies only if the URI segments appear to identify a subfolder
			inside <code>application/controllers</code>, and no routing rule 
			matches the incoming request.
		</p>
		<p>In such a case, the incoming request is interpreted with the "default
			controller" value added to the end, identifying the expected controller.</p>
		<p>If CodeIgntier can still not determine the appropriate controller to handle
			the request, it will return the CodeIgniter 404 error page.</p>
	</slide>

	<slide title="3. Callback Routing" layout="normal" tag="tag3">
		<p>You can use closures in place 
			of the normal routing rules to process the back-references.
		CodeIgniter calls this "callback routing".</p>
		<p>For instance:<pre><code>
	$route['products/([a-zA-Z]+)/edit/(\d+)'] =
	function ($product_type, $id) {
		return 'catalog/product_edit/' . strtolower($product_type) . '/' . $id;
	};			</code></pre>
		</p>
		<p>
			This is code to execute, NOT a controller. In the above example, the two matched tokens
			would be passed as the parameters  <code>$product_type</code> and 
			<code>$id</code>.
		</p>
	</slide>

	<slide title="4. HTTP Verb Routing" layout="normal" tag="tag4">
		<p>You can specify routing rules that apply to specific HTTP
			request types. This might be applicable to utility and
			service controllers.</p>
		<p>Some examples, in a RESTful fashion:<br/>
			<code>$route['products']['PUT'] = 'product/insert';</code>
			<br/>
			<code>$route['products/(:num)']['DELETE'] = 'product/delete/$1';</code>
		</p>
		<p>This is <b>NOT</b> RESTful, but only a part of that, as you
		will see later, about week 12!</p>
	</slide>

	<slide title="5. Error Routing" layout="normal" tag="tag5">
		<p>If the handling of a request cannot be determined,
			CodeIgniter shows a default "404 error page".</p>
		<p>You can provide your own, possibly with additional
			information or perhaps just using the same
			styling as the rest of your site, by specifying a 
			reserved route in the configuration file.</p>
			<p>For instance, <code>$route['404_override'] = 'mybad/complain';</code>
			would direct such an error to the <code>complain</code> method
			of your <code>Mybad</code> controller, which could use
			the <a href="http://www.codeigniter.com/user_guide/libraries/uri.html"
			   target="_blank">URI class</a> to retrieve the offending request string.
		</p>
	</slide>

</lesson>
